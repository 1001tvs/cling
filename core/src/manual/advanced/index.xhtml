<div class="chapter" id="chapter.Advanced"
     xmlns="http://www.w3.org/1999/xhtml">
    <div class="title">Advanced options</div>
    <div class="content">

        <div class="section" id="section.SwitchingXMLDescriptorBinders">
            <div class="title">Switching XML descriptor binders</div>
            <div class="content">

                <p>
                    UPnP utilizes XML documents to transport device and service information between the provider and
                    any control points. These XML documents have to be parsed by Cling to produce the
                    <code>Device</code>
                    metamodel graph, and of course generated from a <code>Device</code> graph. This is the job
                    of the <code>org.fourthline.cling.binding.xml.DeviceDescriptorBinder</code> and the
                    <code>org.fourthline.cling.binding.xml.ServiceDescriptorBinder</code>.
                </p>

                <p>
                    The following implementations are bundled with Cling Core:
                </p>

                <dl>
                    <dt><code>org.fourthline.cling.binding.xml.UDA10DeviceDescriptorBinderImpl</code> (default)</dt>
                    <dd>
                        This implementation reads and writes UDA 1.0 descriptor XML with the JAXP-provided DOM API
                        provided by JDK 6. You do not need any additional libraries to use this binder.
                    </dd>
                    <dt><code>org.fourthline.cling.binding.xml.UDA10ServiceDescriptorBinderImpl</code> (default)</dt>
                    <dd>
                        This implementation reads and writes UDA 1.0 descriptor XML with the JAXP-provided DOM API
                        provided by JDK 6. You do not need any additional libraries to use this binder.
                    </dd>
                    <dt><code>org.fourthline.cling.binding.xml.UDA10DeviceDescriptorBinderSAXImpl</code></dt>
                    <dd>
                        This implementation reads and writes UDA 1.0 descriptor XML with the JAXP-provided SAX API, you
                        don't have to install additional libraries to use it. This binder may consume less memory when
                        reading XML descriptors and perform better than the DOM-based parser. In practice, the
                        difference is usually insignificant, even on very slow machines.
                    </dd>
                    <dt><code>org.fourthline.cling.binding.xml.UDA10ServiceDescriptorBinderSAXImpl</code></dt>
                    <dd>
                        This implementation reads and writes UDA 1.0 descriptor XML with the JAXP-provided SAX API, you
                        don't have to install additional libraries to use it. This binder may consume less memory when
                        reading XML descriptors and perform better than the DOM-based parser. In practice, the
                        difference is usually insignificant, even on very slow machines.
                    </dd>
                </dl>

                <p>
                    You can switch XML binders by overriding the <code>UpnpServiceConfiguration</code>:
                </p>

                <pre><![CDATA[UpnpService upnpService = new UpnpServiceImpl(
    new DefaultUpnpServiceConfiguration() {

            @Override
            public DeviceDescriptorBinder getDeviceDescriptorBinderUDA10() {
                return super.getDeviceDescriptorBinderUDA10();
            }

            @Override
            public ServiceDescriptorBinder getServiceDescriptorBinderUDA10() {
                return super.getServiceDescriptorBinderUDA10();
            }

    }
);]]></pre>

                <p>
                    Performance problems with UPnP discovery are usually caused by too many XML descriptors, not
                    by their size. This is inherent in the bad design of UPnP; each device may expose many individual
                    service descriptors, and Cling will always retrieve all device metadata. The HTTP requests
                    necessary to retrieve dozens of descriptor files usually outweighs the cost of parsing each.
                </p>

                <p>
                    Note that binders are only used for device and service descriptors, not for UPnP action and event
                    message processing.
                </p>

            </div>
        </div>

        <div class="section" id="section.SwitchingXMLProcessors">
            <div class="title">Switching XML processors</div>
            <div class="content">

                <p>
                    All control and event UPnP messages have an XML payload, and the control messages are even
                    wrapped in SOAP envelopes. Handling XML for control and eventing is encapsulated in the Cling
                    transport layer, with an extensible service provider interface:
                </p>

                <dl>
                    <dt><code>org.fourthline.cling.transport.spi.SOAPActionProcessor</code></dt>
                    <dd>
                        This processor reads and writes UPnP SOAP messages and transform them from/to
                        <code>ActionInvocation</code> data. The protocol layer, on top of the transport layer,
                        handles <code>ActionInvocation</code> only.
                    </dd>
                    <dt><code>org.fourthline.cling.transport.spi.GENAEventProcessor</code></dt>
                    <dd>
                        This processor reads and writes UPnP GENA event messages and transform them
                        from/to a <code>List&lt;StateVariableValue></code>.
                    </dd>
                </dl>

                <p>
                    For the <code>SOAPActionProcessor</code>, the following implementations are bundled
                    with Cling Core:
                </p>

                <dl>
                    <dt><code>org.fourthline.cling.transport.impl.SOAPActionProcessorImpl</code> (default)</dt>
                    <dd>
                        This implementation reads and writes XML with the JAXP-provided DOM API provided by JDK 6.
                        You do not need any additional libraries to use this processor. However, its strict compliance
                        with the UPnP specification can cause problems in real-world UPnP applications. This processor
                        will produce errors during reading when XML messages violate the UPnP specification. Use it
                        to test a UPnP stack or application for strict specification compliance.
                    </dd>
                    <dt><code>org.fourthline.cling.transport.impl.PullSOAPActionProcessorImpl</code></dt>
                    <dd>
                        This processor uses the XML Pull API to read messages, and the JAXP DOM API to write messages.
                        You need an implementation of the XML Pull API on your classpath to use this processor, for
                        example, <a href="http://www.extreme.indiana.edu/xgws/xsoap/xpp/mxp1/index.html">XPP3</a>
                        or <a href="http://kxml.sourceforge.net/kxml2/">kXML 2</a>. Compared with the default processor,
                        this processor is much more lenient when reading action message XML. It can deal with broken
                        namespacing, missing SOAP envelopes, and other problems. In UPnP applications where
                        compatibility is more important than specification compliance, you should use this parser.
                    </dd>
                    <dt><code>org.fourthline.cling.transport.impl.RecoveringSOAPActionProcessorImpl</code></dt>
                    <dd>
                        This processor extends the <code>PullSOAPActionProcessorImpl</code> and additionally will
                        work around known bugs of UPnP stacks in the wild and try to recover from parsing failures by
                        modifying the XML text in different ways. This is the processor you should use for maximum
                        compatibility in your application. Furthermore, it let's you handle a failure when reading
                        an XML message easily by overriding the <code>handleInvalidMessage()</code> method, e.g. to
                        create or log an error report.
                    </dd>
                </dl>

                <p>
                    You can switch XML processors by overriding the <code>UpnpServiceConfiguration</code>:
                </p>

                <pre><![CDATA[UpnpService upnpService = new UpnpServiceImpl(
    new DefaultUpnpServiceConfiguration() {

        @Override
        public SOAPActionProcessor getSoapActionProcessor() {
            return new PullSOAPActionProcessorImpl();
        }

    }
);]]></pre>

                <!--
                @Override
                public GENAEventProcessor getGenaEventProcessor() {
                    return super.getGenaEventProcessor();
                }
                -->

            </div>
        </div>


    </div>
</div>
